/*
author: Forec
last edit date: 2016/11/09
email: forec@bupt.edu.cn
LICENSE
Copyright (c) 2015-2017, Forec <forec@bupt.edu.cn>

Permission to use, copy, modify, and/or distribute this code for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

package cstruct

import (
	auth "Cloud/authenticate"
	conf "Cloud/config"
	trans "Cloud/transmit"
	"database/sql"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"
)

/* CUSER DECLARATION
 * id       : primary key for cuser
 * listen   : main connection for cuser
 * username : username
 * token    : generated by server randomly whenever login, used for encryption
 * curpath  : current path the user is looking
 * worklist : current download/upload processes' list
 * filelist : list of the files owned by this user
 */

type cuser struct {
	id       int64
	listen   trans.Transmitable
	username string
	token    string
	curpath  string
	worklist []trans.Transmitable
	filelist []UFile
}

/* CUSER METHODS
 * CONSTRUCTOR: NewCUser(id 			int64,
						username 	string,
						curpath 	string) *cuser
 * MODIFIER: Set[VALUE] (v VALUE_TYPE) 		bool
			 AddUFile	(f *ufile) 	   		bool
*/

type User interface {
	GetUsername() string
	GetId() int64
	GetWorkList() []trans.Transmitable
	GetFilelist() []UFile
	GetAbsPath() string
	GetToken() string
	GoToUpper()
	GoToPath(string) bool
	SetPath(string) bool
	SetToken(string) bool
	SetListener(trans.Transmitable) bool
	AddUFile(UFile) bool
	RemoveUFile(UFile) bool
	AddTransmit(trans.Transmitable) bool
	RemoveTransmit(trans.Transmitable) bool
	DealWithRequests(*sql.DB)
	DealWithTransmission(*sql.DB, trans.Transmitable)
	Logout()
}

func NewCUser(username string, uid int64, curpath string) *cuser {
	u := new(cuser)
	u.listen = nil
	u.id = uid
	u.username = username
	u.curpath = curpath
	u.worklist = nil
	u.filelist = nil
	u.token = ""
	return u
}

func (u *cuser) GetWorkList() []trans.Transmitable {
	return u.worklist
}

func (u *cuser) GetFileList() []UFile {
	return u.filelist
}

func (u *cuser) GetAbsPath() string {
	return conf.USER_FOLDER + u.username + u.curpath
}

func (u *cuser) SetListener(t trans.Transmitable) bool {
	u.listen = t
	return true
}

func (u *cuser) SetPath(path string) bool {
	u.curpath = path
	return true
}

func getCurrentDirectory() (string, bool) {
	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		return "", false
	}
	return strings.Replace(dir, "\\", "/", -1), true
}

func (u *cuser) GoToUpper() {
	if strings.Count(u.curpath, "/") <= 1 {
		u.curpath = "/"
	} else {
		cp := strings.LastIndex(u.curpath, "/")
		if cp == -1 {
			return
		}
		u.curpath = u.curpath[:cp]
	}
}

func (u *cuser) GoToPath(path string) bool {
	var err1, err2 error = nil, nil
	if path[0] == '/' {
		err1 = os.Chdir(conf.USER_FOLDER + u.username + path)
	} else {
		err2 = os.Chdir(path)
	}
	dir, suc := getCurrentDirectory()
	if string(dir[:len(conf.USER_FOLDER)+len(u.username)]) != (conf.USER_FOLDER+u.username) ||
		err1 != nil || err2 != nil || suc != true {
		return false
	} else {
		u.curpath = dir[len(conf.USER_FOLDER)+len(u.username):]
		return true
	}
}

func (u *cuser) SetToken(t string) bool {
	u.token = t
	return true
}

func (u *cuser) GetUsername() string {
	return u.username
}

func (u *cuser) GetFilelist() []UFile {
	return u.filelist
}

func (u *cuser) GetId() int64 {
	return u.id
}

func (u *cuser) GetToken() string {
	return u.token
}

func (u *cuser) AddUFile(f UFile) bool {
	if u.filelist == nil {
		u.filelist = make([]UFile, 0, 10)
	}
	u.filelist = AppendUFile(u.filelist, f)
	return (u.filelist != nil)
}

func (u *cuser) RemoveUFile(f UFile) bool {
	for i, uf := range u.filelist {
		if uf == f {
			u.filelist = append(u.filelist[:i], u.filelist[i:]...)
			return true
		}
	}
	return false
}

func (u *cuser) AddTransmit(t trans.Transmitable) bool {
	if u.worklist == nil {
		u.worklist = make([]trans.Transmitable, 0, 2)
	}
	tempLen := len(u.worklist)
	u.worklist = AppendTransmitable(u.worklist, t)
	return len(u.worklist) != tempLen
}

func (u *cuser) RemoveTransmit(t trans.Transmitable) bool {
	for i, ut := range u.worklist {
		if ut == t {
			u.worklist = append(u.worklist[:i], u.worklist[i:]...)
			return true
		}
	}
	return false
}

func (u *cuser) Logout() {
	if u.listen != nil {
		u.listen.Destroy()
	}
	for _, ut := range u.worklist {
		if ut != nil {
			ut.Destroy()
		}
	}
	fmt.Println(u.username + " logged out")
	//u.worklist = nil
	//u.token = ""
	//u.id = 0xffffffff
	//u.username = auth.GetRandomString(len(u.username))
}

func (u *cuser) DealWithRequests(db *sql.DB) {
	u.curpath = "//"
	fmt.Println(u.username + "Start deal with args")
	for {
		recvB, err := u.listen.RecvBytes()
		if err != nil {
			return
		}
		command := string(recvB)
		fmt.Println(command)
		switch {
		case len(command) >= 2 && strings.ToUpper(command[:2]) == "MV":
			u.mv(db, command)
		case len(command) >= 2 && strings.ToUpper(command[:2]) == "LS":
			u.ls(db, command)
		case len(command) >= 5 && strings.ToUpper(command[:5]) == "TOUCH":
			u.touch(db, command)
		default:
			u.listen.SendBytes([]byte("Invalid Command"))
		}
	}
}

func (u *cuser) mv(db *sql.DB, command string) {

}

func (u *cuser) touch(db *sql.DB, command string) {
	args := strings.Split(command, conf.SEPERATER)
	var valid bool = true
	var isdir int
	var err error
	if len(args) != 4 {
		valid = false
		goto TOUCH_VERIFY
	}
	for i, arg := range args {
		args[i] = strings.Trim(arg, " ")
	}
	isdir, err = strconv.Atoi(args[3])
	if err != nil && strings.ToUpper(args[0]) != "TOUCH" || !isFilenameValid(args[1]) ||
		isPathFormatValid(args[2]) || isdir != 0 && isdir != 1 {
		valid = false
		goto TOUCH_VERIFY
	}
	_, err = db.Exec(fmt.Sprintf(`insert into ufile values(null, %d, -1, '%s',
	 '', '%s', 0, 0, '%s', 1, '', %d)`,
		u.id, args[2], time.Now().Format("2006-01-02 15:04:05"), args[1], isdir))
	if err != nil {
		valid = false
	}
TOUCH_VERIFY:
	if !valid {
		u.listen.SendBytes(auth.Int64ToBytes(int64(200)))
		return
	} else {
		u.listen.SendBytes(auth.Int64ToBytes(int64(400)))
		return
	}
}

func (u *cuser) ls(db *sql.DB, command string) {
	args := strings.Split(command, conf.SEPERATER)
	valid := true
	for i, arg := range args {
		args[i] = strings.Trim(arg, " ")
	}
	argAll := "%"
	for i := 1; i < len(args); i++ {
		if args[i] != "" {
			argAll += args[i] + "%"
		}
	}
	searchPath := u.curpath
	if searchPath == "//" {
		searchPath = "/"
	}
	queryString := fmt.Sprintf("select * from ufile where ownerid=%d and path like '%s%%/' and filename like '%s'",
		u.id, searchPath, argAll)
	fmt.Println(queryString)
	ufilelist, err := db.Query(queryString)
	var returnString string = fmt.Sprintf("FILE%sCREATED TIME%sSIZE%sSHARED%sMODE",
		conf.SEPERATER, conf.SEPERATER, conf.SEPERATER, conf.SEPERATER)
	var uid, ownerid, cfileid, shared, downloaded int
	var private, isdir bool
	var path, perlink, filename, linkpass, created string
	var cuid, csize, cref int
	var cmd5, ccreated string

	if err != nil {
		valid = false
		goto LS_VERIFY
	}

	for ufilelist.Next() {
		err = ufilelist.Scan(&uid, &ownerid, &cfileid, &path, &perlink, &created, &shared, &downloaded,
			&filename, &private, &linkpass, &isdir)
		if err != nil {
			fmt.Println(err.Error())
			valid = false
			break
		}
		if cfileid >= 0 {
			tcfile := db.QueryRow(fmt.Sprintf("SELECT * FROM cfile where uid='%d'", cfileid))
			if tcfile == nil {
				valid = false
				break
			}
			err = tcfile.Scan(&cuid, &cmd5, &csize, &cref, &ccreated)
			if err != nil {
				valid = false
				break
			}
		} else {
			csize = 0
		}
		returnString += fmt.Sprintf("\n%s%s%s%s%d%s%d%s", filename, conf.SEPERATER,
			created, conf.SEPERATER, csize, conf.SEPERATER, shared, conf.SEPERATER)
		if isdir {
			returnString += "DIR"
		} else {
			returnString += "FILE"
		}
	}
LS_VERIFY:
	if !valid {
		u.listen.SendBytes([]byte("error happens when querying files"))
		return
	}
	u.listen.SendBytes([]byte(returnString))
}

func (u *cuser) DealWithTransmission(db *sql.DB, t trans.Transmitable) {

}

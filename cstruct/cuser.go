package cstruct

import (
	"net"
)

/* CUSER DECLARATION
 * id       : primary key for cuser
 * conn     : socket connection for cuser
 * username : username
 * token    : generated by server randomly whenever login, used for encryption
 * curpath  : current path the user is looking
 * filelist : list of the files owned by this user
 */

type cuser struct {
	id       int64
	conn     net.Conn
	username string
	token    string
	curpath  string
	filelist []*ufile
}

/* CUSER METHODS
 * CONSTRUCTOR: NewCUser(id 			int64,
						username 	string,
						curpath 	string) *cuser
 * MODIFIER: Set[VALUE] (v VALUE_TYPE) 		bool
			 AddUFile	(f *ufile) 	   		bool
 * VERIFIER: Verify		(psw string)   		bool
*/

func NewCUser(id int64, username string, curpath string) *cuser {
	u := new(cuser)
	u.conn = nil
	u.id = id
	u.username = username
	u.curpath = curpath
	u.filelist = nil
	u.token = ""
	return u
}

func (u *cuser) GetUsername() string {
	return u.username
}

func (u *cuser) GetFilelist() []*ufile {
	return u.filelist
}

func (u *cuser) GetId() int64 {
	return u.id
}

func (u *cuser) GetToken() string {
	return u.token
}

func (u *cuser) Verify(psw string) bool {
	// TODO
	return true
}

func (u *cuser) AddUFile(f *ufile) bool {
	if u.filelist == nil {
		u.filelist = make([]*ufile, 0, 10)
	}
	u.filelist = AppendElements(u.filelist, f)
	return (u.filelist != nil)
}

func (u *cuser) RemoveUFile(f *ufile) bool {
	for i, uf := range u.filelist {
		if uf == f {
			u.filelist = append(u.filelist[:i], u.filelist[i:]...)
			break
		}
	}
	return true
}
